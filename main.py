# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bhNH1VOfSymhlNqq-jPplcXRo26LzRtG
"""

!pip install paho-mqtt openai

import paho.mqtt.client as mqtt
import openai
import time
import random
from datetime import datetime

# Configuración de Callbacks MQTT
def on_connect(client, userdata, flags, rc, properties=None):
    print("CONNACK received with code %s." % rc)

def on_publish(client, userdata, mid, properties=None):
    print("client: " + str(client) + "userdata: " + str(userdata) + "mid: " + str(mid))

def on_subscribe(client, userdata, mid, granted_qos, properties=None):
    print("Subscribed: " + str(mid) + " " + str(granted_qos))

def on_message(client, userdata, msg):
    print(msg.topic + " " + str(msg.qos) + " " + str(msg.payload))

# Configuración de variables MQTT
USER = "pjriosc"
PASSWORD = "arduino-conections-101"
ADDR = "4f2f4dcf13da4bd89f97a93716d25684.s2.eu.hivemq.cloud"

# Inicializamos el cliente MQTT
client = mqtt.Client(client_id="", userdata=None, protocol=mqtt.MQTTv5)
client.on_connect = on_connect

client.tls_set(tls_version=mqtt.ssl.PROTOCOL_TLS)
client.username_pw_set(USER, PASSWORD)
client.connect(ADDR, 8883)

client.on_subscribe = on_subscribe
client.on_message = on_message
client.on_publish = on_publish

client.subscribe("Arduino/MQTT", qos=1)
client.loop_start()

# Configuration (you can load these from environment variables or a config file)
mqtt_broker_address = "mqtt.example.com"
mqtt_port = 1883
mqtt_topic = "sensor/data"
openai_api_key = "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"
temperature_threshold = 2.0  # Adjustable threshold for temperature change

# Initialize previous values for change detection
previous_temperature = 25.0
previous_humidity = 50.0

# Initialize simulated sensor data
simulated_temperature = 25.0
simulated_humidity = 50.0

# Set up your OpenAI API key
openai.api_key = openai_api_key

# Initialize a list to store sensor readings with (temperature, humidity, timestamp)
sensor_readings = []

# Define a function to read sensor data and append it to the list
def publish_sensor_data():
    global previous_temperature, previous_humidity, simulated_temperature, simulated_humidity, sensor_readings

    # Simulate sensor data here
    simulated_temperature += 1  # Increase temperature every 1 second
    simulated_humidity -= 1  # Decrease humidity every 2 seconds
    if simulated_humidity < 0.0:
        simulated_humidity = 0.0

    # Get the current timestamp
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Append the simulated data to the list with timestamp
    sensor_readings.append((simulated_temperature, simulated_humidity, current_time))

    # Publish simulated data to MQTT
    client.publish(mqtt_topic, f"Temperature: {simulated_temperature:.2f}°C, Humidity: {simulated_humidity:.2f}%")

    # Check for significant changes and request an explanation
    check_for_changes(simulated_temperature, simulated_humidity)

# Define a function to check for significant changes and request an explanation from ChatGPT
def check_for_changes(new_temperature, new_humidity):
    global previous_temperature, previous_humidity

    # Example: If temperature increased by more than the threshold
    if abs(new_temperature - previous_temperature) > temperature_threshold:
        explanation = chat_with_gpt(f"My system detected a significant temperature change. "
                                    f"Current temperature: {new_temperature:.2f}°C, "
                                    f"Previous temperature: {previous_temperature:.2f}°C, "
                                    f"Current humidity: {new_humidity:.2f}%, "
                                    f"Previous humidity: {previous_humidity:.2f}%. "
                                    f"Why did the temperature change significantly?")
        print("Explanation:", explanation)

    # Update the previous values for the next check
    previous_temperature = new_temperature
    previous_humidity = new_humidity

# Define a function to interact with ChatGPT
def chat_with_gpt(prompt):
    response = openai.Completion.create(
        engine="text-davinci-002",
        prompt=prompt,
        max_tokens=50  # Adjust as needed
    )
    return response.choices[0].text

# Connect to the MQTT broker and start the monitoring loop
client.connect("4f2f4dcf13da4bd89f97a93716d25684.s2.eu.hivemq.cloud", 8883)
client.loop_start()
seconds = 0

# Main loop for publishing sensor data
try:
    while True:
        # Collect sensor data and send it to ChatGPT every 1 minute
        seconds += 1
        if seconds == 10:
            print("here!!")
            latest_reading = sensor_readings[-1]  # Get the latest reading from the list
            current_temperature, current_humidity, current_time = latest_reading
            explanation = chat_with_gpt(f"I have a set of data over time in the form of (temperature in °C, humidity, time): {sensor_readings}, "
                                        f"What can you infer from this data?")
            print("Explanation:", explanation)
            seconds = 0

        # Publish sensor data every 1 second
        publish_sensor_data()
        time.sleep(10)  # Wait for 1 second

except KeyboardInterrupt:
    print("Monitoring stopped by the user.")
    client.disconnect()

print(sensor_readings)